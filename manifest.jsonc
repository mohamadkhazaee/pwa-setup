//The .webmanifest extension is specified in the Media type registration section of the specification.
//https://w3c.github.io/manifest/#media-type-registration
//Browsers generally support manifests with other appropriate extensions like .json
{
  //You must provide at least the short_name or name property.
  // If both are provided, short_name is used on the user's home screen, launcher, or other places where space may be limited.
  "name": "Pwa setup, what you need to know",
  "short_name": "PWASETUP",
  //The start_url  tells the browser where your application should start when it is launched,
  //and prevents the app from starting on whatever page the user was on when they added your app to their home screen.
  //Your start_url should direct the user straight into your app, rather than a product landing page.
  // Think about what the user will want to do once they open your app, and place them there.
  // it can have query params
  "start_url": "./?utm_source=pwa",
  //orientation can take one of the following values: all | portrait | landscape | any | natural | landscape-primary |
  // landscape-secondary | portrait-primary | portraint-secondary
  //The orientation can be changed at runtime via the Screen Orientation API.
  "orientation": "portrait",
  //The background_color property is used on the splash screen when the application is first launched on mobile.
  "background_color": "#125b50",
  "description": "description of this app",
  //any type of color string like orange | #fafafa | rgb()
  //do not use gradiants for theme color
  "theme_color": "#125b50",
  //scope defines that what is inside the app and what is outside of it
  // if user click a link out of scope in a pwa,an inner browser will be open for that link
  "scope": "./",
  //display can take one of the following values:  fullscreen | standalone | minimal-ui | browser
  //browser: The application opens in a conventional browser tab.so the icon on menu of phone is just a bookmark
  //standalone: The application will look and feel like a standalone application.
  //This can include the application having a different window, its own icon in the application launcher, etc.
  //minimal-ui: The application will look and feel like a standalone application, but will have a minimal set of UI elements for controlling navigation.
  //fullscreen: it's just suitable for android.desktop & ios will fallback to standalone
  //it's completley fullscreen and do not have any navigation and status bar
  "display": "standalone",
  "icons": [
    {
      "src": "images/icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png"
    },
    {
      "src": "images/icons/icon-96x96.png",
      "sizes": "96x96",
      "type": "image/png"
    },
    {
      "src": "images/icons/icon-128x128.png",
      "sizes": "128x128",
      "type": "image/png"
    },
    {
      "src": "images/icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png"
    },
    {
      "src": "images/icons/icon-152x152.png",
      "sizes": "152x152",
      "type": "image/png"
    },
    {
      "src": "images/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "images/icons/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png"
    },
    {
      "src": "images/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  //The screenshots member defines an array of screenshots intended to showcase the application.
  // These images are intended to be used by progressive web app stores.
  "screenshots": [
    {
      "src": "icons/screenshot.png",
      "sizes": "1170x2532",
      "type": "image/png"
    }
  ]
}
